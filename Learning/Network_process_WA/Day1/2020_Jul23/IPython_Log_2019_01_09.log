
import os
os.listdir(".")
os.walk(".")
g = os.walk(".")
next(g)
next(g)
next(g)
next(g)
next(g)
next(g)
next(g)
next(g)
next(g)
for path, subdirs, files in os.walk("."):
    for f in files:
        print(f)
        
for path, subdirs, files in os.walk("."):
    for f in files:
        print(path, f)
        
d = "/usr/bin"
f = "cat"
"/".join(d, f)
"/".join([d, f])
os.path.join(d, f)
for path, subdirs, files in os.walk("."):
    for f in files:
        print(os.path.join(path, f))
        
os.path.getsize("./a.txt")
for path, subdirs, files in os.walk("."):
    for f in files:
        print(os.path.getsize(os.path.join(path, f)))
        
total = 0
for path, subdirs, files in os.walk("."):
    for f in files:
        total += os.path.getsize(os.path.join(path, f))
        
        
total
from pathlib import Path
p = Path(".")
p
p.name
p.is_dir()
p.is_file()
p.stat.st_size
p.stat().st_size
Path("./a.txt").stat().st_size
p.glob("*.txt")
list(p.glob("*.txt"))
list(Path(".").glob("*"))
[ f.stat().st_size for f in Path(".").glob("*")) ]
[ f.stat().st_size for f in Path(".").glob("*") ]
[ f.stat().st_size for f in Path(".").glob("*") if f.is_file() ]
sum([ f.stat().st_size for f in Path(".").glob("*") if f.is_file() ])
Path(".").glob("*")
list(Path(".").glob("*"))
list(Path(".").glob("**/*"))
list(Path(".").glob("**/*"))
sum([ f.stat().st_size for f in Path(".").glob("**/*") if f.is_file() ])
import os
os.system("ls")
os.system("ls | wc -l")
c = '''mkdir "Program Files" 'Documents and Settings' '''
print(c)
c.split()
import shlex
shlex.split(c)
import subprocess
subprocess.PIPE
subprocess.STDOUT
subprocess.DEVNULL
import re
pattern = re.compile(r"\b\d+\b")
pattern
pattern.search("sdfsdfds 345345 gdfgdf 5465654 fgdfg 345345")
pattern.findall("sdfsdfds 345345 gdfgdf 5465654 fgdfg 345345")
pattern.finditer("sdfsdfds 345345 gdfgdf 5465654 fgdfg 345345")
for m in pattern.finditer("sdfsdfds 345345 gdfgdf 5465654 fgdfg 345345"):
    print(m.group())
    
import yaml
with open("ftp_commands.yml") as infile:
    config = yaml.load(infile)
    
config
import pexpect
get_ipython().run_line_magic('pinfo', 'pexpect.spawn')
from pssh.clients import ParallelSSHClient
get_ipython().run_line_magic('pinfo', 'ParallelSSHClient')
client = ParallelSSHClient(["192.168.56.101"], user="root", password="welcome")
out = client.run_command("uname -a")
out
out["192.168.56.101"]
type(out["192.168.56.101"])
hout = out["192.168.56.101"]
get_ipython().run_line_magic('pinfo', 'hout.channel')
hout.items()
out.stdout
out
out["192.168.56.101"]
out["192.168.56.101"].stdout
out["192.168.56.101"].stdin
out["192.168.56.101"].channel
out["192.168.56.101"].stdout.read()
next(out["192.168.56.101"].stdout)
next(out["192.168.56.101"].stdout)
out = client.run_command("bc -l")
out["192.168.56.101"]
out["192.168.56.101"].stdin
out["192.168.56.101"]
inp = out["192.168.56.101"].stdin
inp.write("scale=100\n")
inp.write("4*a(1)\n")
outp = out["192.168.56.101"]
next(outp)
outp = out["192.168.56.101"].stdout
next(outp)
next(outp)
next(outp)

from pssh.clients.native.single import SSHClient
c = SSHClient("192.168.56.101", "root", "welcome")
c
o = c.run_command("ls /usr/local/src")
o
type()
type(o)
o[0]
o[1]
o[2]
o[3]
o[2]
next(o[2])
next(o[2])
next(o[2])
next(o[2])
next(o[2])
next(o[2])
next(o[2])
next(o[2])
next(o[2])
next(o[2])
next(o[2])
next(o[2])
o[3]
next(o[3])
o
o[0]
from telnetlib import Telnet
from ftplib import FTP
FTP
get_ipython().run_line_magic('pinfo', 'FTP')
ftp = FTP("ftp.chandrashekar.info", "testuser", "w3lc0me")
ftp
ftp.dir(".")
ftp.listdir(".")
ftp.nlst(".")
ftp.cwd("/www/files")
get_ipython().run_line_magic('pinfo', 'ftp.retrbinary')
ftp
ftp.mlsd(".")
list(ftp.mlsd("."))
get_ipython().run_line_magic('pinfo', 'ftp.mkd')
ftp.pwd
ftp.pwd()
ftp.dir(".")
ftp.delete("zzzz_Sep27.py")
ftp.dir(".")
from telnetlib import Telnet
tn = Telnet("192.168.56.101")
tn
tn.read_until("login: ")
tn.read_until(b"login: ")
tn.write(b"root\n")
tn.read_until(b"Password: ")
tn.write(b"welcome\n")
tn.read_until("# ")
tn.read_until(b"# ")
tn.write(b"uptime\n")
tn.read_until(b"# ")
tn.write(b"uname -a\n")
tn.expect([ b"# " ])
tn.set_debuglevel(1)
tn.write(b"uname -a\n")
tn.expect([ b"# " ])
import paramiko
dir(paramiko)
client = paramiko.SSHClient()
get_ipython().run_line_magic('pinfo', 'paramiko.SSHClient')
client = paramiko.SSHClient()
client.load_system_host_keys()
client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
get_ipython().run_line_magic('pinfo', 'client.connect')
client.connect("192.168.56.101", username="root", password="weoiruoiwer")
stdin, stdout, stderr = client.exec_command("ls /usr/local")
stdout
for line in stdout: print(line)
stdin, stdout, stderr = client.exec_command("echo $PATH; whoami; uptime; date")
stdout.read()
stdin, stdout, stderr = client.exec_command("sort")
fruits = """
pineapples
guava
apple
oranges
cherries
berries
"""
stdin.write(fruits)
stdin.flush()
stdin.close()
stdout.readlines()
client.invoke_shell()
channel = client.invoke_shell()
channel
stdout = channel.makefile("r")
stdin = channel.makefile("w")
stderr = channel.makefile_stderr("r")
stdin.write("ls /usr/local\n")
stdout.readline()
stdout.readline()
stdout.readline()
stdout.readline()
stdout.readline()
stdin.write("uptime\n")
stdout.readline()
stdout.readline()
stdout.readline()
stdin.write("uname -a\n")
stdout.readline()
stdout.readline()
client.get_transport()
t = client.get_transport()
get_ipython().run_line_magic('pinfo', 't.open_channel')
ch = t.open_channel("session")
ch
ch.exec_command("cat /etc/passwd")
ch.makefile("r").read()
out = b'root:x:0:0:root:/root:/bin/bash\nbin:x:1:1:bin:/bin:/usr/bin/nologin\ndaemon:x:2:2:daemon:/:/usr/bin/nologin\nmail:x:8:12:mail:/var/spool/mail:/usr/bin/nologin\nftp:x:14:11:ftp:/srv/ftp:/usr/bin/nologin\nhttp:x:33:33:http:/srv/http:/usr/bin/nologin\nuuidd:x:68:68:uuidd:/:/usr/bin/nologin\ndbus:x:81:81:dbus:/:/usr/bin/nologin\nnobody:x:99:99:nobody:/:/usr/bin/nologin\nsystemd-journal-gateway:x:191:191:systemd-journal-gateway:/:/usr/bin/nologin\nsystemd-timesync:x:192:192:systemd-timesync:/:/usr/bin/nologin\nsystemd-network:x:193:193:systemd-network:/:/usr/bin/nologin\nsystemd-bus-proxy:x:194:194:systemd-bus-proxy:/:/usr/bin/nologin\nsystemd-resolve:x:195:195:systemd-resolve:/:/usr/bin/nologin\nsystemd-journal-upload:x:997:997:systemd Journal Upload:/:/sbin/nologin\nsystemd-coredump:x:999:999:systemd Core Dumper:/:/sbin/nologin\nsystemd-journal-remote:x:998:998:systemd Journal Remote:/:/sbin/nologin\ngit:x:996:996:git daemon user:/:/bin/bash\nntp:x:87:87:Network Time Protocol:/var/lib/ntp:/bin/false\noprofile:x:492:492::/var/lib/oprofile:/bin/false\nguest:x:1000:1000::/home/guest:/bin/bash\ntux:x:1001:1001::/home/tux:/bin/bash\nritchie:x:1002:1002::/home/ritchie:/bin/bash\nsteve:x:1003:1003::/home/steve:/bin/bash\naur:x:1004:1004::/home/aur:/bin/bash\ntestuser1:x:1005:1005::/home/testuser1:/bin/bash\ntestuser2:x:1006:1006::/home/testuser2:/bin/bash\ntestuser3:x:1007:1007::/home/testuser3:/bin/bash\ntestuser4:x:1008:1008::/home/testuser4:/bin/bash\npythonista:x:1009:1009::/home/pythonista:/bin/bash\n'
out
str(out, "utf8")
print(str(out, "utf8"))
print(out)
print(str(out, "utf8"))
str(out, "utf8")
out.decode("utf8")
client
from paramiko import Transport
t = Transport(("192.168.56.101", 22))
t.connect(username="root", password="welcome")
sftp = t.open_sftp_client()
from paramiko import SFTPClient
sftp1 = SFTPClient.from_transport(t)
sftp1
client
sftp2 = client.open_sftp()
stp2
sftp2
sftp.listdir("/etc")
sftp.listdir("/usr/local")
sftp.getcwd()
sftp.chdir(".")
sftp.getcwd()
sftp.chdir("/opt")
sftp.getcwd()
sftp.listdir(".")
sftp.chdir("/root")
sftp.listdir(".")
sftp.mkdir("zzzzzz_newfolder")
sftp.listdir(".")
sftp.rmdir("zzzzzz_newfolder")
sftp.listdir(".")
sftp.get("/etc/passwd.txt", "p.txt")
sftp.get("/etc/passwd", "p.txt")
get_ipython().run_line_magic('ls', 'p.txt')
get_ipython().run_line_magic('ls', '-l p.txt ')
get_ipython().run_line_magic('cat', 'p.txt')
sftp.listdir("/tmp")
sftp.put("p.txt", "/tmp/aaa.txt")
sftp.listdir("/tmp")
sftp.stat("/tmp/aaa.txt")
sftp.stat("/tmp/aaa.txt").size
s = sftp.stat("/tmp/aaa.txt")
s.st_size
s = sftp.stat("/tmp/aaa1.txt")
import os
os.path.exists("a.txt")
os.path.exists("a1.txt")
sftp.listdir("/tmp")
sftp.unlink("/tmp/aaa.txt")
sftp.listdir("/tmp")
infile = sftp.open("/var/log/system.log")
infile
for line in infile: 
    if "error" in line:
        print(line)
        
infile.close()
outfile = sftp.open("/tmp/a.txt", "w")
outfile.write("this is line 1\n")
outfile.write("this is line 2\n")
print("this is a new line", file=outfile)
outfile.close()
